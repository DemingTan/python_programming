'''
求出1~13的整数中1出现的次数,并算出1~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字
有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,
可以很快的求出任意非负整数区间中1出现的次数。
'''
'''
思路一：将1-n全部转换为字符串，只需要统计每个字符串中'1'出现的次数并相加即可

思路二：设定整数点（如1、10、100等等）作为位置点i（对应n的各位、十位、百位等等），分别对每个数位上有多少包含1的点进行分析。

1. 根据设定的整数位置，对n进行分割，分为两部分，高位n/i，低位n%i
2. 当i表示百位，且百位对应的数>=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31），
   每一次都包含100个连续的点，即共有(a/10+1)*100个点的百位为1
3. 当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，
   则共有a/10(最高两位0-30)次是包含100个连续点，当最高两位为31（即a=311），本次只对应局部点00~56，共b+1次，
   所有点加起来共有（a/10*100）+(b+1)，这些点百位对应为1
4. 当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）
5. 综合以上三种情况，当百位对应0或>=2时，有(a+8)/10次包含所有100个点，还有当百位为1(a%10==1)，需要增加局部点b+1
6. 之所以补8，是因为当百位为0，则a/10==(a+8)/10，当百位>=2，补8会产生进位位，效果等同于(a/10+1)
'''

class Solution:
    # 方法一
    def number_of_one1(self, n):
        count = 0
        for  i in range(1, n+1):
            for j in str(i):
                if j == '1':
                    count += 1

        return count
    # 方法二
    def number_of_one2(self, n):
        count = 0
        i = 1
        while i <= n:
            count += (n // i + 8) // 10 * i + (n // i % 10 == 1) * (n % i + 1)
            i *= 10
        return count

s = Solution()
print(s.number_of_one1(12))
print(s.number_of_one2(12))


